cabal-version: 2.2

name:    raaz
version: 0.3.0

synopsis: The raaz cryptographic library.

description: Raaz is a cryptographic library for Haskell. The library
  is designed with a special emphasis on using the type system of
  Haskell to eliminate a large set of vulnerabilities like buffer
  overflows, timing attacks etc. It also strives to achieve this
  safety with no compromise on performance.

homepage: https://github.com/raaz-crypto/raaz

copyright: (c) 2012 Piyush P Kurur
license:      Apache-2.0 OR BSD-3-Clause
license-files: LICENSE-BSD3
               LICENSE-APACHE-2.0

author:       Piyush P Kurur
maintainer:   ppk@cse.iitk.ac.in

category:      Codec, Raaz
build-type:    Simple

data-files: tests/standard-test-vectors/blake2/tests.json

extra-source-files: CHANGELOG.md
                  , README.md

bug-reports: https://github.com/raaz-crypto/raaz/issues

source-repository head
  type: git
  location: https://github.com/raaz-crypto/raaz



------------------------- Flags -------------------------------------------------------------

flag linux-getrandom

     Description: Use the getrandom for system entropy instead of
       /dev/urandom. Enabled by default but disable this when building for kernel < 3.17.

     Default: True
     Manual: True

flag native

     Description: Compile for native architecture. Often this enables
       a lot of platform specific optimisation which lead to better
       performance. Do not enable this when packaging though. Also
       tested only with gcc

     Default: False
     Manual: True

flag wipe-memset

     Description: Use plain memset for wiping memory. The problem with
       its use is that agressive compilers often optimise it out. Raaz
       uses platform specific functions designed specifically to avoid
       this and hence enabling this flag is STRONGLY DISCOURAGED.  Use
       it only if your platform does not support such a call.

     Default: False
     Manual: True

---------------------------- The common clause ------------------------------------------------

common defaults
  default-language: Haskell2010
  ghc-options: -Wall
  build-depends: base                    >= 4.10 &&  < 4.13
               , bytestring              >= 0.10 &&  < 0.11
               , deepseq                 >= 1.4  &&  < 1.5
               , vector                  >= 0.12 &&  < 0.13
               , mtl

  ------------------------ Compiler optimisation flags -------------------------------------
  if flag(native) { cc-options: -march=native  }

  ------------------------ Memory wiping calls  -------------------------------------------
  if !flag(wipe-memset)
     if   os(netbsd)  { cc-options: -DHAVE_EXPLICIT_MEMSET    }
     elif os(windows) { cc-options: -DHAVE_SECURE_ZERO_MEMORY }
     elif !os(osx)    { cc-options: -DHAVE_EXPLICIT_BZERO     }

  ----------------------- System specific configurations ----------------------------------
  if os(linux)   { cc-options: -DPLATFORM_LINUX   }
  if os(osx)     { cc-options: -DPLATFORM_OSX     }
  if os(openbsd) { cc-options: -DPLATFORM_OPENBSD }
  if os(windows)
     cc-options: -DPLATFORM_WINDOWS -DUNICODE
     cpp-options: -DPLATFORM_WINDOWS
     extra-libraries: Advapi32, Kernel32
     build-tools: hsc2hs


----------------------------- The core library ------------------------------------------------
library core
  -- visibility: public
  import: defaults
  hs-source-dirs: core
  exposed-modules: Raaz.Core
                 , Raaz.Core.CpuSupports
                 , Raaz.Core.Transfer
                 , Raaz.Core.Types
                 , Raaz.Core.Types.Internal
                 , Raaz.Entropy
                 , Raaz.Primitive.Blake2.Internal
                 , Raaz.Primitive.Sha2.Internal
                 , Raaz.Primitive.ChaCha20.Internal
                 , Raaz.Primitive.Poly1305.Internal
                 , Raaz.Primitive.HashMemory
                 , Raaz.Primitive.Keyed.Internal

  other-modules: Raaz.Core.ByteSource
               , Raaz.Core.Encode
               , Raaz.Core.Memory
               , Raaz.Core.MonoidalAction
               , Raaz.Core.Parse.Applicative
               , Raaz.Core.Primitive
               , Raaz.Core.Util
               , Raaz.Core.Constants
               , Raaz.Core.Encode.Internal
               , Raaz.Core.Encode.Base16
               , Raaz.Core.Encode.Base64
               , Raaz.Core.IOCont
               , Raaz.Core.Prelude
               , Raaz.Core.Util.ByteString
               , Raaz.Core.Types.Pointer
               , Raaz.Core.Types.Tuple
               , Raaz.Core.Types.Equality
               , Raaz.Core.Types.Endian
               , Raaz.Core.Types.Copying

  c-sources: core/cbits/raaz/core/endian.c
           , core/cbits/raaz/core/memory.c
           , core/cbits/raaz/core/cpusupports.c
  include-dirs: core/cbits
  includes: core/cbits/raaz/core/endian.h
  install-includes: core/cbits/raaz/core/endian.h

  --------------------- Entropy ----------------------------------------------

  if   os(windows)                          { hs-source-dirs: core/entropy/windows    }
  elif os(openbsd) || os(netbsd)            { hs-source-dirs: core/entropy/arc4random }
  elif os(linux)   && flag(linux-getrandom) { hs-source-dirs: core/entropy/getrandom  }
  else                                      { hs-source-dirs: core/entropy/urandom    }

----------------------------- Libverse as a sublibrary -----------------------------

library libverse
  import: defaults
  build-depends: core
  hs-source-dirs: libverse
  exposed-modules: Raaz.Verse.Chacha20.C.Portable
                 , Raaz.Verse.Sha512.C.Portable
                 , Raaz.Verse.Sha256.C.Portable
                 , Raaz.Verse.Blake2b.C.Portable
                 , Raaz.Verse.Poly1305.C.Portable
  c-sources: libverse/chacha20/c/portable.c
           , libverse/sha256/c/portable.c
           , libverse/sha512/c/portable.c
           , libverse/blake2b/c/portable.c
           , libverse/poly1305/c/portable.c
           , libverse/verse.c
  include-dirs: libverse
  includes: libverse/verse.h


---------------------- Indef packages for implementations ----------------------
--
-- There are the following generic indef packages which capture
-- implementation of cryptographic bulk primitives.
--
-- indef: Captures implementation of a generic primitive
--
-- util: Exposes some utility function using the generic interface of
--   the primitive
--
-- digest-indef: Captures implementation of a primitive that processes
--   its input and finally produces a digest value. Examples include
--   cryptographic hashes, MACs, encrypted authenticators etc. In the
--   case of the last one we also encrypt the message (process the
--   input)
--
-- keyed-indef: Captures implementations of primitives that requires a
--   starting (often secret) key. Examples are ciphers, MACs,
--   encrypted authenticators.
--

library indef
  -- visibility: public
  import: defaults
  build-depends: core
  hs-source-dirs: indef
  signatures: Implementation

library util
  import: defaults
  build-depends: core
               , indef
  hs-source-dirs: indef
  exposed-modules: Utils

library digest-indef
  -- visibility: public
  import: defaults
  hs-source-dirs: indef/digest
  signatures: Implementation
  build-depends: core
               , indef
               , util

library keyed-indef
  import: defaults
  hs-source-dirs: indef/keyed
  signatures: Implementation
  build-depends: core
               , indef
               , util

-------- Indef packages supplying cryptographic operations -------------------------
--
-- A cryptographic operation performed using an implementation of a
-- primitive is exposed in the next set of packages using an interface
-- file.
--
-- hash-indef: Provides cryptographic hashes/message digests
--
-- auth-indef: Provides message authentication
--
-- random-indef: Provides cryptographically secure pseudo-random
--   generator making use of system entropy for seeding and a suitable
--   primitive (typically a cipher) for stretching the seed.


library auth-indef
  import: defaults
  hs-source-dirs: indef/auth
  build-depends: core
               , keyed-indef
               , digest-indef
               , util
  exposed-modules: Interface

library hash-indef
  import: defaults
  hs-source-dirs: indef/digest/hash
  signatures: Implementation
  build-depends: core
               , indef
               , digest-indef
               , util
  exposed-modules: Interface

library random-indef
  import: defaults
  hs-source-dirs: indef/random
  build-depends: core
               , indef
               , util
  signatures: Implementation
  exposed-modules: PRGState

-- keyed-hash: An implementation of message authentication using
-- hashes. This package takes in an Implementation of a hash (together
-- with some constraints) and creates an implementation for a message
-- authenticator. The Mac.Implementation module that it exposes can be
-- used as the Implementation module for the auth-indef package.

library keyed-hash
  import: defaults
  hs-source-dirs: indef/keyed/hash
  signatures: Implementation
  build-depends: core
               , util
  exposed-modules: Mac.Implementation


------------------- The indef of all primitives ------------------
--
-- This package collects all primitives supported by raaz, gives
-- primitive specific implementations a new name, and exposes the
-- interfaces. This is the indef package to use if you want to plugin
-- new implementation.
--

library prim-indef
  -- visibility: public
  import: defaults
  build-depends: core
               , hash-indef
               , random-indef
               , keyed-hash
               , auth-indef
  hs-source-dirs: prims/sha2
                , prims/blake2
  signatures: Blake2b.Implementation
            , Blake2s.Implementation
            , Sha256.Implementation
            , Sha512.Implementation
  reexported-modules: Blake2b.Interface
                    , Blake2s.Interface
                    , Sha256.Interface
                    , Sha512.Interface
                    , Blake2b.Mac.Interface
                    , Blake2s.Mac.Interface
                    , PRGState
  mixins: hash-indef (Interface as Blake2b.Interface)  requires (Implementation as Blake2b.Implementation)
        , hash-indef (Interface as Blake2s.Interface)  requires (Implementation as Blake2s.Implementation)
        , hash-indef (Interface as Sha512.Interface)   requires (Implementation as Sha512.Implementation)
        , hash-indef (Interface as Sha256.Interface)   requires (Implementation as Sha256.Implementation)
        , random-indef requires (Implementation as ChaCha20.Implementation)

        -- MAC-ing with blake2b
        , keyed-hash (Mac.Implementation as Blake2b.Mac.Implementation)
            requires (Implementation as Blake2b.Implementation)
        , auth-indef (Interface as Blake2b.Mac.Interface) requires (Implementation as Blake2b.Mac.Implementation)

        -- MAC-ing with blake2s
        , keyed-hash (Mac.Implementation as Blake2s.Mac.Implementation)
            requires (Implementation as Blake2s.Implementation)
        , auth-indef (Interface as Blake2s.Mac.Interface) requires (Implementation as Blake2s.Mac.Implementation)

--------------------  The implementation modules ----------------------------------
--
-- This package exposes all the implementations provided by the raaz
-- library. In addition, for all primitives Prim supported by raaz, it
-- exposes a default Prim.Implementation module. Therefore, adding
-- this package to the dependency of another package that needs an
-- implementation of Prim (via the module hole Prim.Implementation)
-- satisfies the requirement.
--
-- One can selectively override the implementation used by a primitive
-- using the idiom
--
-- build-depends: prim-indef
--              , implementation
-- mixins: prim-indef requires (ChaCha20.Implementation as ChaCha20.CHandWritten)
--
--
-- The above lines ensures that the interface provided by prim-indef
-- for ChaCha20, uses the the Hand Written implementation while all
-- other primitives uses the default implementation (set in the
-- implementation package).

library implementation
  -- visibility: public
  import: defaults
  build-depends: core
               , libverse
  hs-source-dirs: implementation
  exposed-modules: Blake2b.CPortable
                 , Sha256.CPortable
                 , ChaCha20.CPortable
                 , Sha512.CPortable
                 -- Implementation hand written in C
                 , ChaCha20.CHandWritten
                 , Blake2b.CHandWritten
                 , Blake2s.CHandWritten
                 , Poly1305.CPortable
                 , Sha256.CHandWritten
                 , Sha512.CHandWritten

  -- By re-exporting the modules, we are giving a default selection
  -- for implementations.
  reexported-modules: Blake2b.CPortable as Blake2b.Implementation
                    , Blake2s.CHandWritten as Blake2s.Implementation
                    , ChaCha20.CPortable   as ChaCha20.Implementation
                    , Sha256.CPortable     as Sha256.Implementation
                    , Poly1305.CPortable   as Poly1305.Implementation
                    , Sha512.CPortable     as Sha512.Implementation
  other-modules: Poly1305.Memory
  c-sources: implementation/cbits/raaz/hash/blake2/blake2b/portable.c
           , implementation/cbits/raaz/hash/blake2/blake2s/portable.c
           , implementation/cbits/raaz/hash/sha1/portable.c
           , implementation/cbits/raaz/hash/sha256/portable.c
           , implementation/cbits/raaz/hash/sha512/portable.c
           , implementation/cbits/raaz/cipher/chacha20/cportable.c
  include-dirs: implementation/cbits/
  includes: implementation/cbits/raaz/hash/blake2/common.h
          , implementation/cbits/raaz/hash/blake2/blake2b/constants.h
          , implementation/cbits/raaz/hash/blake2/blake2s/constants.h

-------------------------------- The main raaz library -------------------------------------

library
  import: defaults
  hs-source-dirs: raaz
  build-depends: core
               , implementation
               , prim-indef
               , libverse
  exposed-modules: Raaz
                 , Raaz.Blake2b
                 , Raaz.Blake2s
                 , Raaz.Sha256
                 , Raaz.Sha512
                 , Raaz.Random
                 , Raaz.V1
  reexported-modules: Raaz.Core
                    , Raaz.Core.Types

  autogen-modules: Paths_raaz
  other-modules: Paths_raaz

---------------------------- Executables -------------------------------------------------

executable raaz
  import: defaults
  hs-source-dirs: raaz/bin
  main-is: Main.hs
  other-modules: Command.Rand
               , Command.Info
               , Command.Checksum
               , Usage
  build-depends: optparse-applicative >= 0.13.0.0
               , core
               , raaz
  if impl(ghc < 8)
    -- 'transformers' needed for "Control.Monad.IO.Class" only
    -- starting with base-4.9 we don't need 'transformers' anymore
    build-depends: transformers

---------------------------------- Test suit -----------------------------------------------------
common test-defaults
  import: defaults
  build-depends: core
               , HUnit                          >= 1.2
               , QuickCheck                     >= 2.4
               , hspec

library test-core
  -- visibility: private
  import: test-defaults
  hs-source-dirs: tests/core
  exposed-modules: Tests.Core
                 , Tests.Core.Imports
                 , Tests.Core.Instances
                 , Tests.Core.Utils

library test-cipher
  import: test-defaults
  hs-source-dirs: tests/cipher
  build-depends: test-core
               , indef
               , keyed-indef
               , util
  exposed-modules: Tests.Cipher

library test-hash
  import: test-defaults
  hs-source-dirs: tests/message-digest
  build-depends: test-core
               , indef
               , hash-indef
               , util
  exposed-modules: Tests.Digest
                 , Tests.Digest.Compare
  mixins: hash-indef(Interface as AlternateInterface) requires (Implementation as Alternate)
        , hash-indef

library test-auth
  import: test-defaults
  hs-source-dirs: tests/auth
  build-depends: test-core
               , indef
               , auth-indef
  exposed-modules: Tests.Auth

-------------------------- The test suits -------------------------

test-suite tests
  import: test-defaults
  type: exitcode-stdio-1.0
  hs-source-dirs: tests
  main-is: Spec.hs
  build-depends: hspec-discover
               , attoparsec
               , test-core
               , test-cipher
               , test-hash
               , test-auth
               , keyed-hash
               , implementation
               , raaz
  build-tool-depends: hspec-discover:hspec-discover
  if !os(windows)
    cpp-options: -DHAVE_DEV_NULL

  other-modules: Raaz.Core.ByteSourceSpec
               , Raaz.Core.EncodeSpec
               , Raaz.Core.MemorySpec
               , Raaz.Core.Types.WordSpec
               , Raaz.Core.Util.ByteStringSpec
               , Raaz.RandomSpec
               , Raaz.Cipher.ChaCha20Spec
               , Raaz.Digest.Sha256Spec
               , Raaz.Digest.Sha512Spec
               , Raaz.Digest.Blake2Spec
               , Raaz.Mac.Poly1305Spec
               , Paths_raaz

  mixins: test-cipher requires (Implementation as ChaCha20.Implementation)
        , test-hash (Tests.Digest as Sha256.Digest, Tests.Digest.Compare as Sha256.VsHandwritten)
          requires (Implementation as Sha256.Implementation, Alternate as Sha256.CHandWritten)

        , test-hash (Tests.Digest as Sha512.Digest, Tests.Digest.Compare as Sha512.VsHandwritten)
          requires (Implementation as Sha512.Implementation, Alternate as Sha512.CHandWritten)

        , test-hash (Tests.Digest as Blake2b.Digest, Tests.Digest.Compare as Blake2b.VsHandwritten)
          requires (Implementation as Blake2b.Implementation, Alternate as Blake2b.CHandWritten)

        , test-hash (Tests.Digest as Blake2s.Digest, Tests.Digest.Compare as Blake2s.VsHandwritten)
          requires (Implementation as Blake2s.Implementation, Alternate as Blake2s.CHandWritten)


        , test-auth (Tests.Auth as Poly1305.Auth)     requires (Implementation as Poly1305.Implementation)

        , keyed-hash (Mac.Implementation as Blake2s.Mac.Implementation)
            requires (Implementation as Blake2s.Implementation)
        , test-auth  (Tests.Auth as Blake2s.Auth) requires (Implementation as Blake2s.Mac.Implementation)

        , keyed-hash (Mac.Implementation as Blake2b.Mac.Implementation)
            requires (Implementation as Blake2b.Implementation)
        , test-auth  (Tests.Auth as Blake2b.Auth) requires (Implementation as Blake2b.Mac.Implementation)

--------------------------- Benchmarkings ---------------------------------------------
common bench-defaults
 import:defaults
 hs-source-dirs: benchmarks/internal
 build-depends:  criterion-measurement     >= 0.1
               , pretty
               , core




library bench-types
  import: bench-defaults
  exposed-modules: Benchmark.Types

library bench-prim
  import: bench-defaults
  build-depends: bench-types
               , util
               , indef
  other-modules: Benchmark.Types
  exposed-modules: Benchmark.Primitive

library bench-csprg
  import: bench-defaults
  build-depends: bench-types
               , util
               , random-indef
  exposed-modules: Benchmark.CSPRG
  other-modules: Benchmark.Types


benchmark primitives
  import: bench-defaults
  hs-source-dirs: benchmarks
  main-is: Main.hs
  type: exitcode-stdio-1.0
  build-depends: pretty
               , core
               , implementation
               , bench-types
               , bench-prim
               , bench-csprg
  other-modules: Benchmark.Types
  mixins: bench-prim (Benchmark.Primitive as Benchmark.Blake2b.CPortable)
          requires   (Implementation as Blake2b.CPortable)

        , bench-prim (Benchmark.Primitive as Benchmark.Blake2b.CHandWritten)
          requires   (Implementation as Blake2b.CHandWritten)

        , bench-prim (Benchmark.Primitive as Benchmark.Blake2s.CHandWritten)
          requires   (Implementation as Blake2s.CHandWritten)

        , bench-prim (Benchmark.Primitive as Benchmark.ChaCha20.CPortable)
          requires   (Implementation as ChaCha20.CPortable)

        , bench-prim (Benchmark.Primitive as Benchmark.ChaCha20.CHandWritten)
          requires   (Implementation as ChaCha20.CHandWritten)

        , bench-prim (Benchmark.Primitive as Benchmark.Poly1305.CPortable)
          requires   (Implementation as Poly1305.CPortable)

        , bench-prim (Benchmark.Primitive as Benchmark.Sha256.CPortable)
          requires   (Implementation as Sha256.CPortable)

        , bench-prim (Benchmark.Primitive as Benchmark.Sha256.CHandWritten)
          requires   (Implementation as Sha256.CHandWritten)

        , bench-prim (Benchmark.Primitive as Benchmark.Sha512.CPortable)
          requires (Implementation as Sha512.CPortable)

        , bench-prim (Benchmark.Primitive as Benchmark.Sha512.CHandWritten)
          requires (Implementation as Sha512.CHandWritten)

        , bench-csprg (Benchmark.CSPRG as Benchmark.CSPRG.CPortable)
          requires (Implementation as ChaCha20.CPortable)
