cabal-version: 2.2

name:    raaz
version: 0.3.0

synopsis: The raaz cryptographic library.

description: Raaz is a cryptographic library for Haskell. The library
  is designed with a special emphasis on using the type system of
  Haskell to eliminate a large set of vulnerabilities like buffer
  overflows, timing attacks etc. It also strives to achieve this
  safety with no compromise on performance.

homepage: https://github.com/raaz-crypto/raaz

copyright: (c) 2012 Piyush P Kurur
license:      Apache-2.0 OR BSD-3-Clause
license-files: LICENSE-BSD3
               LICENSE-APACHE-2.0

author:       Piyush P Kurur
maintainer:   ppk@cse.iitk.ac.in

category:      Codec, Raaz
build-type:    Simple


extra-source-files: CHANGELOG.md
                  , README.md

bug-reports: https://github.com/raaz-crypto/raaz/issues

source-repository head
  type: git
  location: https://github.com/raaz-crypto/raaz



------------------------- Flags -------------------------------------------------------------

flag linux-getrandom

     Description: Use the getrandom for system entropy instead of
       /dev/urandom. Enabled by default but disable this when building for kernel < 3.17.

     Default: True
     Manual: True

flag native

     Description: Compile for native architecture. Often this enables
       a lot of platform specific optimisation which lead to better
       performance. Do not enable this when packaging though. Also
       tested only with gcc

     Default: False
     Manual: True

flag avx2

     Description: Support avx2 optimisations. Warning: enable only if
       you are sure of support.

     Default: False
     Manual: True


---------------------------- The common clause ------------------------------------------------

common defaults
  default-language: Haskell2010
  ghc-options: -Wall
  build-depends: base                    >= 4.10 &&  < 4.13
               , bytestring              >= 0.10 &&  < 0.11
               , deepseq                 >= 1.4  &&  < 1.5
               , vector                  >= 0.12 &&  < 0.13
               , mtl

  ------------------------ Compiler optimisation flags -------------------------------------
  if flag(native) { cc-options: -march=native  }
  if flag(avx2)   { cc-options: -mavx2         }

  ----------------------- System specific configurations ----------------------------------

  if os(linux)   { cc-options: -DPLATFORM_LINUX   }
  if os(osx)     { cc-options: -DPLATFORM_OSX     }
  if os(openbsd) { cc-options: -DPLATFORM_OPENBSD }
  if os(windows)
     cc-options: -DPLATFORM_WINDOWS -DUNICODE
     cpp-options: -DPLATFORM_WINDOWS
     extra-libraries: Advapi32, Kernel32
     build-tools: hsc2hs


----------------------------- The core library ------------------------------------------------
library core
  import: defaults
  hs-source-dirs: core
  exposed-modules: Raaz.Core
                 , Raaz.Core.CpuSupports
                 , Raaz.Core.Transfer
                 , Raaz.Core.Types
                 , Raaz.Core.Types.Internal
                 , Raaz.Entropy
                 , Raaz.Primitive.Blake2.Internal
                 , Raaz.Primitive.Sha256.Internal
                 , Raaz.Primitive.Sha512.Internal
                 , Raaz.Primitive.ChaCha20.Internal
                 , Raaz.Primitive.Poly1305.Internal
                 , Raaz.Primitive.Poly1305.Memory
                 , Raaz.Primitive.HashMemory

  other-modules: Raaz.Core.ByteSource
               , Raaz.Core.Encode
               , Raaz.Core.Memory
               , Raaz.Core.MonoidalAction
               , Raaz.Core.Parse.Applicative
               , Raaz.Core.Primitive
               , Raaz.Core.Util
               , Raaz.Core.Constants
               , Raaz.Core.Encode.Internal
               , Raaz.Core.Encode.Base16
               , Raaz.Core.Encode.Base64
               , Raaz.Core.IOCont
               , Raaz.Core.Util.ByteString
               , Raaz.Core.Types.Pointer
               , Raaz.Core.Types.Tuple
               , Raaz.Core.Types.Equality
               , Raaz.Core.Types.Endian
               , Raaz.Core.Types.Copying

  c-sources: core/cbits/raaz/core/endian.c
           , core/cbits/raaz/core/memory.c
           , core/cbits/raaz/core/cpusupports.c
  include-dirs: core/cbits
  includes: core/cbits/raaz/core/endian.h
  install-includes: core/cbits/raaz/core/endian.h

  --------------------- Entropy ----------------------------------------------

  if  os(windows)                         { hs-source-dirs: core/entropy/windows    }
  elif os(openbsd) || os(netbsd)          { hs-source-dirs: core/entropy/arc4random }
  elif os(linux) && flag(linux-getrandom) { hs-source-dirs: core/entropy/getrandom  }
  else                                    { hs-source-dirs: core/entropy/urandom    }


---------------------- The signatures relevant for core ---------------------------

library indef
  import: defaults
  build-depends: core
  hs-source-dirs: indef
  signatures: Implementation
  exposed-modules: Utils

library blake2b-indef
  import: defaults
  build-depends: core, indef
  hs-source-dirs: indef
  reexported-modules: Blake2b.Utils
  signatures: Blake2b.Implementation
  mixins: indef (Utils as Blake2b.Utils) requires (Implementation as Blake2b.Implementation)

library blake2s-indef
  import: defaults
  build-depends: core, indef
  hs-source-dirs: indef
  reexported-modules: Blake2s.Utils
  signatures: Blake2s.Implementation
  mixins: indef (Utils as Blake2s.Utils) requires (Implementation as Blake2s.Implementation)

library sha256-indef
  import: defaults
  build-depends: core, indef
  hs-source-dirs: indef
  reexported-modules: Sha256.Utils
  signatures: Blake2s.Implementation
  mixins: indef (Utils as Sha256.Utils) requires (Implementation as Sha256.Implementation)

library sha512-indef
  import: defaults
  build-depends: core, indef
  hs-source-dirs: indef
  reexported-modules: Sha512.Utils
  signatures: Sha512.Implementation
  mixins: indef (Utils as Sha512.Utils) requires (Implementation as Sha512.Implementation)


library chacha20-indef
  import: defaults
  build-depends: core, indef
  hs-source-dirs: indef
  signatures: ChaCha20.Implementation
  exposed-modules: ChaCha20.PRG
  reexported-modules: ChaCha20.Utils
  mixins: indef (Utils as ChaCha20.Utils) requires (Implementation as ChaCha20.Implementation)

library poly1305-indef
  -- visibility: public
  import: defaults
  build-depends: core, indef
  hs-source-dirs: indef
  signatures: Poly1305.Implementation
  reexported-modules: Poly1305.Utils
  mixins: indef (Utils as Poly1305.Utils) requires (Implementation as Poly1305.Implementation)

library hash-indef
  import: defaults
  hs-source-dirs: indef
  build-depends: core
               , blake2b-indef
               , blake2s-indef
               , sha512-indef
               , sha256-indef
  exposed-modules: Hash

library cipher-indef
  import: defaults
  hs-source-dirs: indef
  build-depends: core
               , chacha20-indef
  exposed-modules: Cipher

library random-indef
  import: defaults
  hs-source-dirs: indef
  build-depends: core
               , chacha20-indef
  exposed-modules: Random
  -- Not sure why the line below is needed. Cabal seems to give an
  -- warning.
  other-modules: ChaCha20.PRG

--------------------  The implementation modules ----------------------------------

library implementation
  import: defaults
  build-depends: core
  hs-source-dirs: implementation, libverse
  exposed-modules: Blake2b.CPortable
                 , Sha256.CPortable
                 , ChaCha20.CPortable
                 , Sha512.CPortable
                 -- Implementation hand written in C
                 , ChaCha20.CHandWritten
                 , Blake2b.CHandWritten
                 , Blake2s.CHandWritten
                 , Sha256.CHandWritten
                 , Sha512.CHandWritten

  other-modules: Raaz.Verse.Chacha20.C.Portable
               , Raaz.Verse.Sha512.C.Portable
               , Raaz.Verse.Sha256.C.Portable
               , Raaz.Verse.Blake2b.C.Portable
  c-sources: libverse/chacha20/c/portable.c
           , libverse/sha256/c/portable.c
           , libverse/sha512/c/portable.c
           , libverse/blake2b/c/portable.c
           , libverse/verse.c
  c-sources: implementation/cbits/raaz/hash/blake2/blake2b/portable.c
           , implementation/cbits/raaz/hash/blake2/blake2s/portable.c
           , implementation/cbits/raaz/hash/sha1/portable.c
           , implementation/cbits/raaz/hash/sha256/portable.c
           , implementation/cbits/raaz/hash/sha512/portable.c
           , implementation/cbits/raaz/cipher/chacha20/cportable.c
  include-dirs: implementation/cbits/
              , libverse
  includes: implementation/cbits/raaz/hash/blake2/common.h
          , implementation/cbits/raaz/hash/blake2/blake2b/constants.h
          , implementation/cbits/raaz/hash/blake2/blake2s/constants.h
          , libverse/verse.h
-------------------------------- The main raaz library -------------------------------------

library
  import: defaults
  hs-source-dirs: raaz
  build-depends: core
               , hash-indef
               , cipher-indef
               , random-indef
               , implementation
  exposed-modules: Raaz
  reexported-modules: Raaz.Core
                    , Raaz.Core.Types
                    , Raaz.Cipher
                    , Raaz.Hash
                    , Raaz.Random
                    , Raaz.Entropy
  mixins: cipher-indef (Cipher as Raaz.Cipher)
            requires (ChaCha20.Implementation as ChaCha20.CPortable)

        , hash-indef (Hash as Raaz.Hash)
            requires (Blake2b.Implementation as Blake2b.CPortable,
                      Blake2s.Implementation as Blake2s.CHandWritten,
                      Sha256.Implementation as Sha256.CPortable,
                      Sha512.Implementation as Sha512.CPortable
          )

        , random-indef(Random as Raaz.Random)
            requires (ChaCha20.Implementation as ChaCha20.CPortable)



  autogen-modules: Paths_raaz
  other-modules: Paths_raaz

---------------------------- Executables -------------------------------------------------

executable raaz
  import: defaults
  hs-source-dirs: raaz/bin
  main-is: Main.hs
  other-modules: Command.Checksum
               , Command.Rand
               , Command.Info
               , Usage
  build-depends: optparse-applicative >= 0.13.0.0
               , core
               , raaz
  if impl(ghc < 8)
    -- 'transformers' needed for "Control.Monad.IO.Class" only
    -- starting with base-4.9 we don't need 'transformers' anymore
    build-depends: transformers

---------------------------------- Test suit -----------------------------------------------------

test-suite tests
  import: defaults
  type: exitcode-stdio-1.0
  hs-source-dirs: tests
  main-is: Spec.hs

  build-depends: raaz
               , core
  build-depends: HUnit                          >= 1.2
               , QuickCheck                     >= 2.4
               , hspec
               , hspec-discover
               , transformers
               , vector

  build-tool-depends: hspec-discover:hspec-discover
  if !os(windows)
    cpp-options: -DHAVE_DEV_NULL

  other-modules: Common
               , Common.Cipher
               , Common.Hash
               , Common.Imports
               , Common.Instances
               , Common.Utils
               , Raaz.Cipher.ChaCha20Spec
               , Raaz.Core.ByteSourceSpec
               , Raaz.Core.EncodeSpec
               , Raaz.Core.MemorySpec
               , Raaz.Core.Types.WordSpec
               , Raaz.Core.Util.ByteStringSpec
               , Raaz.RandomSpec
               , Raaz.Hash.Sha256Spec
               , Raaz.Hash.Sha512Spec
               , Raaz.Hash.Blake2Spec

--------------------------- Benchmarkings ---------------------------------------------
common bench-defaults
 import:defaults
 hs-source-dirs: benchmarks/internal
 build-depends:  criterion-measurement     >= 0.1
               , pretty
               , core




library bench-types
  import: bench-defaults
  exposed-modules: Benchmark.Types

library bench-prim
  import: bench-defaults
  build-depends: bench-types
               , indef
  other-modules: Benchmark.Types
  exposed-modules: Benchmark.Primitive

library bench-csprg
  import: bench-defaults
  build-depends: bench-types
               , chacha20-indef
  exposed-modules: Benchmark.CSPRG
  other-modules: Benchmark.Types

benchmark primitives
  import: bench-defaults
  hs-source-dirs: benchmarks
  main-is: Main.hs
  type: exitcode-stdio-1.0
  build-depends: pretty
               , core
               , implementation
               , bench-types
               , bench-prim
               , bench-csprg
  other-modules: Benchmark.Types
  mixins: bench-prim (Benchmark.Primitive as Benchmark.Blake2b.CPortable)
          requires   (Implementation as Blake2b.CPortable)

        , bench-prim (Benchmark.Primitive as Benchmark.Blake2b.CHandWritten)
          requires   (Implementation as Blake2b.CHandWritten)

        , bench-prim (Benchmark.Primitive as Benchmark.Blake2s.CHandWritten)
          requires   (Implementation as Blake2s.CHandWritten)

        , bench-prim (Benchmark.Primitive as Benchmark.ChaCha20.CPortable)
          requires   (Implementation as ChaCha20.CPortable)

        , bench-prim (Benchmark.Primitive as Benchmark.ChaCha20.CHandWritten)
          requires   (Implementation as ChaCha20.CHandWritten)

        , bench-prim (Benchmark.Primitive as Benchmark.Sha256.CPortable)
          requires   (Implementation as Sha256.CPortable)

        , bench-prim (Benchmark.Primitive as Benchmark.Sha256.CHandWritten)
          requires   (Implementation as Sha256.CHandWritten)

        , bench-prim (Benchmark.Primitive as Benchmark.Sha512.CPortable)
          requires (Implementation as Sha512.CPortable)

        , bench-prim (Benchmark.Primitive as Benchmark.Sha512.CHandWritten)
          requires (Implementation as Sha512.CHandWritten)

        , bench-csprg (Benchmark.CSPRG as Benchmark.CSPRG.CPortable)
          requires (ChaCha20.Implementation as ChaCha20.CPortable)

        , bench-csprg (Benchmark.CSPRG as Benchmark.CSPRG.CHandWritten)
          requires (ChaCha20.Implementation as ChaCha20.CHandWritten)
