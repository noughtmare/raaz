{-# LANGUAGE DataKinds                   #-}
-- | An implementation of a cryptographic primitive is a method to
-- process data that is multiples of its block size. Fast
-- implementations involve other details like the alignment
-- restriction on the input buffer and all that. We package all this
-- in the following signature.
signature ChaCha20.Implementation where

import Raaz.Core
import Raaz.Primitive.ChaCha20.Internal

type BufferAlignment = 32

-- | The primitive for which the implementation is given
type Prim = ChaCha20

-- | The type of the internals should be ChaCha20Mem, so that we can
-- use it for our CSPRG.
type Internals = ChaCha20Mem

-- | Generate pseudo-random data in multiples of blocks.
csprgBlocks :: AlignedPointer BufferAlignment
            -> BLOCKS Prim
            -> MT Internals ()
